#!/bin/bash
# Set the version to be captured in newer versions of CheckMK Inventory
CMK_VERSION="0.0.0"

if [ -z "$MK_VARDIR" ]; then
    echo "ERROR: Unable to load ENV variables"
    exit 2
fi

BOOT_REQUIRED=no
UPDATES=0
SECURITY_UPDATES=0
CACHE_RESULT_CHECK=$MK_VARDIR/cache/yum_result.cache
CACHE_YUM_UPDATE=$MK_VARDIR/cache/yum_update.cache
CACHE_PREV_UPTIME=$MK_VARDIR/cache/yum_uptime.cache
LAST_UPDATE_TIMESTAMP=-1

# Check which distribution and major version we are running
if [ -f "/etc/os-release" ]; then
  # Read required fields
  . /etc/os-release
  
  # Extract major version
  MAJOR_VERSION=$(echo "$VERSION_ID" | cut -d. -f1)

  # Normalize DISTRO_ID using ID_LIKE if available
  if echo "$ID_LIKE" | grep -qw "rhel"; then
    DISTRO_ID="rhel"
  else
    DISTRO_ID="$ID"
  fi
elif [ -f "/etc/redhat-release" ]; then
  # EL6 or other legacy RHEL-like systems
  RELEASE_TEXT=$(cat /etc/redhat-release)

  if echo "$RELEASE_TEXT" | grep -qi "CentOS"; then
    DISTRO_ID="centos"
  elif echo "$RELEASE_TEXT" | grep -qi "Red Hat"; then
    DISTRO_ID="rhel"
  else
    DISTRO_ID="unknown"
  fi

  # Extract major version number (e.g., "6" from "release 6.10")
  MAJOR_VERSION=$(echo "$RELEASE_TEXT" | grep -oE 'release [0-9]+' | awk '{print $2}')
else
  MAJOR_VERSION=0
  DISTRO_ID="unknown"
fi

# Determine which package manager to use based on distribution and availability
PKG_MGR=""
HISTORY_CMD=""
LIST_CMD=""
SECURITY_SUPPORTED=0

# Check for dnf5 first (Fedora 41+)
if command -v dnf5 >/dev/null 2>&1; then
    PKG_MGR="dnf5"
    HISTORY_CMD="dnf5 history list"
    LIST_CMD="dnf5 list --upgrades"
    SECURITY_SUPPORTED=1  # dnf5 supports security updates via check-upgrade --security
# Check for regular dnf (Fedora 22+ up to 40, CentOS 8+)
elif command -v dnf >/dev/null 2>&1; then
    PKG_MGR="dnf"
    HISTORY_CMD="dnf history list"
    LIST_CMD="dnf list updates"
    SECURITY_SUPPORTED=1
# Fall back to yum (CentOS/RHEL 6-7)
elif command -v yum >/dev/null 2>&1; then
    PKG_MGR="yum"
    HISTORY_CMD="yum history list"
    LIST_CMD="yum list updates"
    SECURITY_SUPPORTED=1
else
    echo "ERROR: No supported package manager found (yum, dnf, or dnf5)"
    exit 2
fi

# get current package manager state - use cache directory contents as fingerprint
YUM_CURRENT="$(ls -lR /var/cache/{yum,dnf}/ 2>/dev/null)"

# check if cached listing of /var/cache/yum already exists - create empty one otherwise
if [ ! -e "$CACHE_YUM_UPDATE" ]
then
    touch "$CACHE_YUM_UPDATE"
elif [ ! -f "$CACHE_YUM_UPDATE" ] || [ -L "$CACHE_YUM_UPDATE" ]
then
    # something is wrong here...
    echo "ERROR: invalid cache file"
    exit 2
else
    # get cached information
    YUM_CACHED=$(cat "$CACHE_YUM_UPDATE")
fi

# check if cached check result already exists and is nothing but a file
if [ ! -e "$CACHE_RESULT_CHECK"  ]
then
    touch "$CACHE_RESULT_CHECK"
elif [ ! -f "$CACHE_RESULT_CHECK" ] || [ -L "$CACHE_RESULT_CHECK" ]
then
    # something is wrong here...
    echo "ERROR: invalid cache file"
    exit 2
fi

# check if system has rebooted - if so, remove cached check file to avoid wrong "reboot required"-state
RUNNING_SECS=$(cat /proc/uptime | cut -d" " -f1 | cut -d"." -f1)

# check if cache file with previously seen uptime is existing - create one otherwise
if [ ! -e "$CACHE_PREV_UPTIME" ]
then
    echo 0 > "$CACHE_PREV_UPTIME"
    PREV_UPTIME=0
elif [ ! -f "$CACHE_PREV_UPTIME" ] || [ -L "$CACHE_PREV_UPTIME" ]
then
    # something is wrong here...
    echo "ERROR: invalid cache file"
    exit 2
else
    # get cached information
    PREV_UPTIME=$(cat "$CACHE_PREV_UPTIME")
    # save current uptime
    echo "$RUNNING_SECS" > "$CACHE_PREV_UPTIME"
fi

# check if current uptime is lower than cached last seen uptime to detect reboot
if (( RUNNING_SECS < PREV_UPTIME ))
then
    # remove pre-reboot cache which requires reboot
    rm -f "$CACHE_RESULT_CHECK"
    # create empty check cache
    touch "$CACHE_RESULT_CHECK"
fi

echo "<<<yum>>>"

# compare current and cached yum information
# Update cached data if YUM fingerprint has changed OR machine has recently rebooted.
if [ "$YUM_CURRENT" != "$YUM_CACHED" ] || [ ! -s "$CACHE_RESULT_CHECK" ]
then
    count=0
    # Check for running package manager processes
    while [ -n "$(pgrep -f "(python|/usr/bin/).*/(yum|dnf)" | head -1)" ]; do
        if [ $count -eq 3 ]; then
            echo "ERROR: Tried to run $PKG_MGR for 30 secs but another package manager instance was running"
            exit 2
        else
            ((count++))
            sleep 10
        fi
    done

    # Check if reboot required for new kernel
    KERNEL_PACKAGE=$(rpm -qf --qf "%{NAME}" /boot/config-$(uname -r))
    if [ -z "$KERNEL_PACKAGE" ]; then
        BOOT_REQUIRED="no"
    else
        RUNNING_KERNEL=$(rpm -qf --qf "%{VERSION}-%{RELEASE}\n" /boot/config-$(uname -r))
        LATEST_KERNEL=$(rpm -q --last --qf "%{VERSION}-%{RELEASE}\n" $KERNEL_PACKAGE | grep -v $KERNEL_PACKAGE | head -n1)
        LATEST_KERNEL="${LATEST_KERNEL%"${LATEST_KERNEL##*[![:space:]]}"}" # remove tailing whitespace

        if [[ "$RUNNING_KERNEL" == "$LATEST_KERNEL" ]]; then
            BOOT_REQUIRED="no"
        else
            BOOT_REQUIRED="yes"
        fi
    fi

    # Count available updates - different commands for different package managers
    if [ "$PKG_MGR" = "dnf5" ]; then
        UPDATES=$(timeout 25s dnf5 list --upgrades 2>/dev/null | grep -E "^[a-zA-Z]" | wc -l || echo "-1")
    else
        UPDATES=$(timeout 25s $PKG_MGR -C --noplugins --quiet list updates 2>/dev/null | grep "\." | cut -d' ' -f1 | wc -l || echo "-1")
    fi

    # Check for security updates if supported
    if [ $SECURITY_SUPPORTED -eq 1 ]; then
        if [ "$PKG_MGR" = "dnf5" ]; then
            # dnf5 uses different command for security updates
            SECURITY_OUTPUT=$(timeout 25s dnf5 -C --quiet check-upgrade --security 2>/dev/null)
            SECURITY_UPDATES=$(echo "$SECURITY_OUTPUT" | grep -E "^[a-zA-Z0-9]" | wc -l || echo "-1")
            SECURITY_UPDATES_LIST=$(echo "$SECURITY_OUTPUT" | grep -E "^[a-zA-Z0-9]" | awk '{print $1}' | sed 's/\.[^.]*$//' | paste -sd, -)
        else
            # Test if --security is available for traditional yum/dnf
            timeout 25s $PKG_MGR -C --noplugins --quiet --security list updates > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                if [ "$PKG_MGR" = "dnf" ]; then
                    SECURITY_OUTPUT=$(timeout 25s dnf -C --noplugins --quiet --security list updates 2>/dev/null)
                else
                    SECURITY_OUTPUT=$(timeout 25s yum -C --noplugins --quiet --security list updates 2>/dev/null)
                fi
                SECURITY_UPDATES=$(echo "$SECURITY_OUTPUT" | grep "\." | cut -d' ' -f1 | wc -l || echo "-1")
                SECURITY_UPDATES_LIST=$(echo "$SECURITY_OUTPUT" | grep "\." | cut -d' ' -f1 | sed 's/\.[^.]*$//' |  paste -sd, -)
            else
                # --security not supported with this version
                SECURITY_UPDATES="-2"
                SECURITY_UPDATES_LIST=""
            fi
        fi
    else
        # Package manager doesn't support security updates
        SECURITY_UPDATES="-2"
        SECURITY_UPDATES_LIST=""
    fi

    # Check last time of installed Updates from history
    if [ "$PKG_MGR" = "dnf5" ]; then
        # dnf5 has different history output format - look for upgrade/update actions, not download
        LAST_UPDATE_TIMESTAMP=$(dnf5 history list 2>/dev/null | awk '/upgrade --refresh|update[^-]|update$/ {print $5" "$6}' | head -n1 | date -f - +"%s" 2>/dev/null || echo "-1")
    else
        HISTORY_CMD="$PKG_MGR -C --quiet --noplugins history list"

        # Use 'all' for RHEL/CentOS 7 or below
        if { [ "$DISTRO_ID" = "rhel" ] || [ "$DISTRO_ID" = "centos" ]; } && [ "$MAJOR_VERSION" -le 7 ]; then
            HISTORY_CMD="$HISTORY_CMD all"
        fi

        # Run the history command and extract the last update timestamp
        LAST_UPDATE_TIMESTAMP=$($HISTORY_CMD | awk '{if(NR>2)print}' | grep -E ' U | Upgrade| Update' | head -n1 | awk -F'|' '{print $3}' | date -f - +"%s" 2>/dev/null || echo "-1")
    fi

    # Add check in case this is a brand new built machine
    if [ "$LAST_UPDATE_TIMESTAMP" = "" ]; then 
        LAST_UPDATE_TIMESTAMP=-1
    fi

    echo "$BOOT_REQUIRED"
    echo "$UPDATES"
    echo "$SECURITY_UPDATES $SECURITY_UPDATES_LIST"
    echo "$LAST_UPDATE_TIMESTAMP"

    # cache check yum/dnf
    # check if cached check already exists and is nothing but a file
    if [ -f "$CACHE_YUM_UPDATE" ] || [ ! -L "$CACHE_YUM_UPDATE" ]; then
        echo "$YUM_CURRENT" > "$CACHE_YUM_UPDATE"
    else
        # something is wrong here...
        echo "ERROR: invalid check cache file"
        exit 2
    fi

    # cache check results
    if [ -f "$CACHE_RESULT_CHECK" ] || [ ! -L "$CACHE_RESULT_CHECK" ]
    then
        echo "$BOOT_REQUIRED" > "$CACHE_RESULT_CHECK"
        echo "$UPDATES" >> "$CACHE_RESULT_CHECK"
        echo "$SECURITY_UPDATES $SECURITY_UPDATES_LIST" >> "$CACHE_RESULT_CHECK"
        echo "$LAST_UPDATE_TIMESTAMP" >> "$CACHE_RESULT_CHECK"
    else
        # something is wrong here...
        echo "ERROR: invalid check result cache file"
        exit 2
    fi
else
    # use cache file
    cat "$CACHE_RESULT_CHECK"
fi
